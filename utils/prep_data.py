#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Apr  3 12:51:53 2023

@author: alexander
"""

import pandas as pd

def get_data(file_path, label_name):
    """Reads csv data to frame and extracts a label list. File must 
    include feature vectors and a list of classification labels
     
    INPUT:  file_path: path to data file
            label_name: column name for data labels
            
    OUTPUT: frame: csv data written to pandas frame
            labels: labels to be passed to classifier 
    """
    
    frame = pd.read_csv(file_path) 
    labels = frame[label_name]     
    
    return frame, labels

def extract_features(data, feature_labels):
    """Extracts feature vectors from data frame. Assumes each row is a feature 
    vector for a given label
    
    INPUT:  data: a pandas frame generated by get_data or externally
            feature_labels: column labels for data features
    
    OUTPUT: feature_vectors: subframe containing only features to be pass to 
            input layer
    
    """
    
    feature_vectors = data[feature_labels]
    return feature_vectors

def collapse_labels(data, label_name, target_map):
    
    """Collapses redundant labels onto a new label. Can increase classifer
    accuracy if outputs are strongly correlated, 
    
    Example: height and shoe size coded as separate labels will reduce accuracy 
    if the features are weight, age, bone density, bio sex etc. Height and shoe 
    size both represent a latent variable, body size
    
    INPUT:  data: a pandas frame generated by get_data, extract_features
            or externally
            
            label_name: column name for data labels
            
            target_map: a dictionary where keys are target labels and values are
                        original labels

                        Example: tm = {'body size'': ['shoe size','height']...
                                       'blood pressue': ['blood viscousity',...
                                                         'cardiac output',...
                                                         'vascular resistance']}
                            
    OUTPUT: new_data: new frame in which redudant labels are pooled into new labels

    """
    
    new_data = data.copy()
    target_labels = list(target_map.keys())
    
    for key in target_labels:
        new_data[label_name] = new_data[label_name].replace(target_map[key],key)
        
    return new_data
    
    